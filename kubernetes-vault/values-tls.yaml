global:
  enabled: true
  tlsDisable: false

injector:
  certs:
    # secretName is the name of the secret that has the TLS certificate and
    # private key to serve the injector webhook. If this is null, then the
    # injector will default to its automatic management mode that will assign
    # a service account to the injector to generate its own certificates.
    secretName: vault-agent-injector-tls

    # caBundle is a base64-encoded PEM-encoded certificate bundle for the
    # CA that signed the TLS certificate that the webhook serves. This must
    # be set if secretName is non-null.
    caBundle: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLekNDQWhPZ0F3SUJBZ0lSQU9IeE14bE1Ddno5ZU11U2lQQnhBYjB3RFFZSktvWklodmNOQVFFTEJRQXcKTHpFdE1Dc0dBMVVFQXhNa056QXlaRFpqTURJdE1EZ3hZaTAwWW1OaUxUbGlPVGN0T0RJMk1qTTVZemt3WmpaaQpNQjRYRFRJeE1ESXdOakU0TVRJd04xb1hEVEkyTURJd05URTVNVEl3TjFvd0x6RXRNQ3NHQTFVRUF4TWtOekF5ClpEWmpNREl0TURneFlpMDBZbU5pTFRsaU9UY3RPREkyTWpNNVl6a3daalppTUlJQklqQU5CZ2txaGtpRzl3MEIKQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBb24rSkNWUXF3OStnY3JVZWhRQmh5UmhudE9WMWZOZlViMW01K29tLwpxOTlBUHc2UnN4LyszdW5jUktHUHV6YkNxQjJxRi83UzduZU1wWjFVeGdMbjcrRW5SSDNhc2RadUhDNWZlS0NQCkpUUTFLazNDS3htWU04dFhXUjNBcDAyT3QyampxY3VlNDhtZXdiWHlmdVVrdDNlTzZRRXd6NzRoeXRZQXQ1TXQKZU93dTJXWFQxMnd6ZVdKaDRrK3RCajJqWkp4L0hWNDhDYzdGT0N1ZUVUVitMRWU3TXhhMmtiRnNUaEpmekx6MApxZDREdFFzMUkvK3FXeWpGTFhkMUlqNUhEZk1QZm1ZSm45ZUNxUVd6WWtkYkxkOGwzTTZwaU9Td2c3TUc4cHRiClVSSEN0M0s4eXFib2ZoN1h1U295dXlrSGxrUXVXKzJpR21SOWQzaFQrbStGL1FJREFRQUJvMEl3UURBT0JnTlYKSFE4QkFmOEVCQU1DQWdRd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVXd3cUdzNkJiTHg1Rgp2VW5RQ2VsZ3NTUTc3WGd3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUNET0dMMjc0cEpMWm1wZGk5enNzNmQvCk9KWGwzd2l4UDJ5U2N2RnRrc1RjS0hhSlhPQkR1RS8rRmRFdnFsLzE5WTRGQ2RwK0dFeTFMOFRiR0JnenA2QnUKTlZGNHVRU3RuUzRxbjdqMHg3RzZOTE9YRlhTZEwzN0V5MkQ5bElPSWl6R25nWU4ySGxNYnMyNnJtMmRFQmF1TQpkNThqMkkwOFR1ZmJpRGFIV1hYT3crVUU2L0Y0NTJMY0U4NTc3bS9SVmJMdDB5K0JFL1pRcXNtajN6ZkNoVW04CmlUNXAzNG9XWEtNVWEvNXhtQ0xwR2dhQjMveFczRkdWZHROT2dORTRkM29NUDVQbUpsMXVLejN0NFludXBucmoKdHI5V2ZDbEc4L2s4RXdndGhKNWNYZFoxZWpEdkkwaGNpaWlOUW1TNVAvNFNWNngySzJtdUdVdkR6cW9Od3JvPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="

    # certName and keyName are the names of the files within the secret for
    # the TLS cert and private key, respectively. These have reasonable
    # defaults but can be customized if necessary.
    certName: vault-injector.crt
    keyName: vault-injector.key
server:
  extraEnvironmentVars:
    VAULT_CACERT: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
  extraVolumes:
    - type: secret
      name: vault-server-tls # Matches the ${SECRET_NAME} from above

  standalone:
    enabled: false
  ha:
    enabled: true

    config: |
      ui = true

      listener "tcp" {
        tls_disable = 0
        address = "[::]:8200"
        cluster_address = "[::]:8201"
        tls_cert_file = "/vault/userconfig/vault-server-tls/vault.crt"
        tls_key_file  = "/vault/userconfig/vault-server-tls/vault.key"
        tls_client_ca_file = "/vault/userconfig/vault-server-tls/vault.ca"  
      }
      storage "consul" {
        path = "vault"
        address = "HOST_IP:8500"
      }

      service_registration "kubernetes" {}

      # Example configuration for using auto-unseal, using Google Cloud KMS. The
      # GKMS keys must already exist, and the cluster must have a service account
      # that is authorized to access GCP KMS.
      #seal "gcpckms" {
      #   project     = "vault-helm-dev-246514"
      #   region      = "global"
      #   key_ring    = "vault-helm-unseal-kr"
      #   crypto_key  = "vault-helm-unseal-key"
      #}

ui:
  enabled: true
  serviceType: "LoadBalancer"
